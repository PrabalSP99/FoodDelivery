{"ast":null,"code":"import _slicedToArray from\"/Users/prabalparihar/Downloads/Project/MJ1_FD/fdapp/backend/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectSpread from\"/Users/prabalparihar/Downloads/Project/MJ1_FD/fdapp/backend/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/prabalparihar/Downloads/Project/MJ1_FD/fdapp/backend/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React,{useReducer,useContext,createContext}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var CartStateContext=/*#__PURE__*/createContext();var CartDispatchContext=/*#__PURE__*/createContext();var reducer=function reducer(state,action){switch(action.type){case\"ADD\":return[].concat(_toConsumableArray(state),[{id:action.id,name:action.name,qty:action.qty,size:action.size,price:action.price,img:action.img}]);case\"REMOVE\":var newArr=_toConsumableArray(state);newArr.splice(action.index,1);return newArr;case\"DROP\":var empArray=[];return empArray;case\"UPDATE\":var arr=_toConsumableArray(state);arr.find(function(food,index){if(food.id===action.id){// console.log(food.qty, parseInt(action.qty), action.price + food.price)\narr[index]=_objectSpread(_objectSpread({},food),{},{qty:parseInt(action.qty)+food.qty,price:action.price+food.price});}return arr;});return arr;default:console.log(\"Error in Reducer\");}};export var CartProvider=function CartProvider(_ref){var children=_ref.children;var _useReducer=useReducer(reducer,[]),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];return/*#__PURE__*/_jsx(CartDispatchContext.Provider,{value:dispatch,children:/*#__PURE__*/_jsx(CartStateContext.Provider,{value:state,children:children})});};export var useCart=function useCart(){return useContext(CartStateContext);};export var useDispatchCart=function useDispatchCart(){return useContext(CartDispatchContext);};","map":{"version":3,"names":["React","useReducer","useContext","createContext","jsx","_jsx","CartStateContext","CartDispatchContext","reducer","state","action","type","concat","_toConsumableArray","id","name","qty","size","price","img","newArr","splice","index","empArray","arr","find","food","_objectSpread","parseInt","console","log","CartProvider","_ref","children","_useReducer","_useReducer2","_slicedToArray","dispatch","Provider","value","useCart","useDispatchCart"],"sources":["/Users/prabalparihar/Downloads/Project/MJ1_FD/fdapp/backend/frontend/src/components/ContextReducer.js"],"sourcesContent":["import React, { useReducer, useContext, createContext } from 'react';\n\nconst CartStateContext = createContext();\nconst CartDispatchContext = createContext();\n\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"ADD\":\n            return [...state, { id: action.id, name: action.name, qty: action.qty, size: action.size, price: action.price, img: action.img }]\n        case \"REMOVE\":\n            let newArr = [...state]\n            newArr.splice(action.index, 1)\n            return newArr;\n        case \"DROP\":\n        let empArray = []\n        return empArray\n        case \"UPDATE\":\n            let arr = [...state]\n            arr.find((food, index) => {\n                if (food.id === action.id) {\n                    // console.log(food.qty, parseInt(action.qty), action.price + food.price)\n                    arr[index] = { ...food, qty: parseInt(action.qty) + food.qty, price: action.price + food.price }\n                }\n                return arr\n            })\n            return arr\n        default:\n            console.log(\"Error in Reducer\");\n    }\n};\n\nexport const CartProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, []);\n\n    return (\n        <CartDispatchContext.Provider value={dispatch}>\n            <CartStateContext.Provider value={state}>\n                {children}\n            </CartStateContext.Provider>\n        </CartDispatchContext.Provider>\n    )\n};\n\nexport const useCart = () => useContext(CartStateContext);\nexport const useDispatchCart = () => useContext(CartDispatchContext);"],"mappings":"qdAAA,MAAO,CAAAA,KAAK,EAAIC,UAAU,CAAEC,UAAU,CAAEC,aAAa,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAErE,GAAM,CAAAC,gBAAgB,cAAGH,aAAa,CAAC,CAAC,CACxC,GAAM,CAAAI,mBAAmB,cAAGJ,aAAa,CAAC,CAAC,CAG3C,GAAM,CAAAK,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAIC,KAAK,CAAEC,MAAM,CAAK,CAC/B,OAAQA,MAAM,CAACC,IAAI,EACf,IAAK,KAAK,CACN,SAAAC,MAAA,CAAAC,kBAAA,CAAWJ,KAAK,GAAE,CAAEK,EAAE,CAAEJ,MAAM,CAACI,EAAE,CAAEC,IAAI,CAAEL,MAAM,CAACK,IAAI,CAAEC,GAAG,CAAEN,MAAM,CAACM,GAAG,CAAEC,IAAI,CAAEP,MAAM,CAACO,IAAI,CAAEC,KAAK,CAAER,MAAM,CAACQ,KAAK,CAAEC,GAAG,CAAET,MAAM,CAACS,GAAI,CAAC,GACpI,IAAK,QAAQ,CACT,GAAI,CAAAC,MAAM,CAAAP,kBAAA,CAAOJ,KAAK,CAAC,CACvBW,MAAM,CAACC,MAAM,CAACX,MAAM,CAACY,KAAK,CAAE,CAAC,CAAC,CAC9B,MAAO,CAAAF,MAAM,CACjB,IAAK,MAAM,CACX,GAAI,CAAAG,QAAQ,CAAG,EAAE,CACjB,MAAO,CAAAA,QAAQ,CACf,IAAK,QAAQ,CACT,GAAI,CAAAC,GAAG,CAAAX,kBAAA,CAAOJ,KAAK,CAAC,CACpBe,GAAG,CAACC,IAAI,CAAC,SAACC,IAAI,CAAEJ,KAAK,CAAK,CACtB,GAAII,IAAI,CAACZ,EAAE,GAAKJ,MAAM,CAACI,EAAE,CAAE,CACvB;AACAU,GAAG,CAACF,KAAK,CAAC,CAAAK,aAAA,CAAAA,aAAA,IAAQD,IAAI,MAAEV,GAAG,CAAEY,QAAQ,CAAClB,MAAM,CAACM,GAAG,CAAC,CAAGU,IAAI,CAACV,GAAG,CAAEE,KAAK,CAAER,MAAM,CAACQ,KAAK,CAAGQ,IAAI,CAACR,KAAK,EAAE,CACpG,CACA,MAAO,CAAAM,GAAG,CACd,CAAC,CAAC,CACF,MAAO,CAAAA,GAAG,CACd,QACIK,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CACvC,CACJ,CAAC,CAED,MAAO,IAAM,CAAAC,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAAC,IAAA,CAAqB,IAAf,CAAAC,QAAQ,CAAAD,IAAA,CAARC,QAAQ,CACnC,IAAAC,WAAA,CAA0BjC,UAAU,CAACO,OAAO,CAAE,EAAE,CAAC,CAAA2B,YAAA,CAAAC,cAAA,CAAAF,WAAA,IAA1CzB,KAAK,CAAA0B,YAAA,IAAEE,QAAQ,CAAAF,YAAA,IAEtB,mBACI9B,IAAA,CAACE,mBAAmB,CAAC+B,QAAQ,EAACC,KAAK,CAAEF,QAAS,CAAAJ,QAAA,cAC1C5B,IAAA,CAACC,gBAAgB,CAACgC,QAAQ,EAACC,KAAK,CAAE9B,KAAM,CAAAwB,QAAA,CACnCA,QAAQ,CACc,CAAC,CACF,CAAC,CAEvC,CAAC,CAED,MAAO,IAAM,CAAAO,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAA,QAAS,CAAAtC,UAAU,CAACI,gBAAgB,CAAC,GACzD,MAAO,IAAM,CAAAmC,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAA,QAAS,CAAAvC,UAAU,CAACK,mBAAmB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}